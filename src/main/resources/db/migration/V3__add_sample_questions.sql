-- Вставка новых тестов
INSERT INTO test (name) VALUES
    ('Потоки ввода/вывода'),
    ('Исключения'),
    ('Многопоточность'),
    ('Лямбда-выражения');

-- Вставка вопросов для теста "Исключения"
INSERT INTO question (text, difficulty, question_type) VALUES
    ('Что такое поток в Java?', 1, 'MULTIPLE_CHOICE'),
    ('Как открыть файл для чтения в Java?', 1, 'MULTIPLE_CHOICE'),
    ('Что делает класс BufferedReader?', 1, 'MULTIPLE_CHOICE'),
    ('Как записать данные в файл?', 1, 'MULTIPLE_CHOICE'),
    ('Какая разница между InputStream и Reader?', 2, 'MULTIPLE_CHOICE'),
    ('Какой метод закрывает поток в Java?', 1, 'MULTIPLE_CHOICE'),
    ('Какая библиотека предоставляет NIO?', 2, 'MULTIPLE_CHOICE'),
    ('Что такое FileOutputStream?', 1, 'MULTIPLE_CHOICE'),
    ('Как прочитать строку из файла?', 1, 'MULTIPLE_CHOICE'),
    ('Как обработать ошибку при чтении файла?', 2, 'MULTIPLE_CHOICE'),
    ('Что делает метод flush()?', 2, 'MULTIPLE_CHOICE'),
    ('Как читать данные построчно?', 2, 'MULTIPLE_CHOICE'),
    ('Как определить размер файла?', 2, 'MULTIPLE_CHOICE'),
    ('Как копировать файл с помощью Java?', 2, 'MULTIPLE_CHOICE');

-- Вставка вопросов для теста "Потоки ввода-вывода"
INSERT INTO question (text, difficulty, question_type) VALUES
    ('Что такое исключение?', 1, 'MULTIPLE_CHOICE'),
    ('Как объявить блок try-catch?', 1, 'MULTIPLE_CHOICE'),
    ('Что такое checked exception?', 2, 'MULTIPLE_CHOICE'),
    ('Какое ключевое слово используется для генерации исключений?', 1, 'MULTIPLE_CHOICE'),
    ('Какой класс является родителем всех исключений?', 1, 'MULTIPLE_CHOICE'),
    ('Что делает блок finally?', 2, 'MULTIPLE_CHOICE'),
    ('Как определить свое исключение?', 2, 'MULTIPLE_CHOICE'),
    ('Как избежать NullPointerException?', 2, 'MULTIPLE_CHOICE'),
    ('Как перехватывать несколько исключений?', 2, 'MULTIPLE_CHOICE'),
    ('Что происходит при отсутствии catch?', 2, 'MULTIPLE_CHOICE'),
    ('Какие есть типы исключений?', 1, 'MULTIPLE_CHOICE'),
    ('Что такое IllegalArgumentException?', 2, 'MULTIPLE_CHOICE'),
    ('Как обрабатывать исключения в потоках?', 2, 'MULTIPLE_CHOICE'),
    ('Как бросить RuntimeException?', 2, 'MULTIPLE_CHOICE');

-- Вставка вопросов для теста "Многопоточность"
INSERT INTO question (text, difficulty, question_type) VALUES
    ('Что такое многопоточность?', 1, 'MULTIPLE_CHOICE'),
    ('Как создать поток в Java?', 1, 'MULTIPLE_CHOICE'),
    ('Какая разница между Thread и Runnable?', 2, 'MULTIPLE_CHOICE'),
    ('Как работает метод join()?', 2, 'MULTIPLE_CHOICE'),
    ('Что делает метод start()?', 1, 'MULTIPLE_CHOICE'),
    ('Какая разница между synchronized и volatile?', 2, 'MULTIPLE_CHOICE'),
    ('Что такое deadlock?', 2, 'MULTIPLE_CHOICE'),
    ('Как избежать race condition?', 2, 'MULTIPLE_CHOICE'),
    ('Как завершить поток принудительно?', 2, 'MULTIPLE_CHOICE'),
    ('Как использовать ExecutorService?', 2, 'MULTIPLE_CHOICE'),
    ('Что такое Callable и Future?', 2, 'MULTIPLE_CHOICE'),
    ('Как использовать блокировку (Lock)?', 2, 'MULTIPLE_CHOICE'),
    ('Что такое ThreadLocal?', 2, 'MULTIPLE_CHOICE'),
    ('Как измерить производительность потоков?', 2, 'MULTIPLE_CHOICE');

-- Вставка вопросов для теста "Лямбда-выражения"
INSERT INTO question (text, difficulty, question_type) VALUES
    ('Что такое лямбда-выражение?', 1, 'MULTIPLE_CHOICE'),
    ('Как объявить лямбда-выражение?', 1, 'MULTIPLE_CHOICE'),
    ('Как связаны лямбда-выражения и функциональные интерфейсы?', 2, 'MULTIPLE_CHOICE'),
    ('Что такое метод reference?', 2, 'MULTIPLE_CHOICE'),
    ('Какие типы функциональных интерфейсов есть?', 1, 'MULTIPLE_CHOICE'),
    ('Как работают лямбда-выражения с потоками (Stream API)?', 2, 'MULTIPLE_CHOICE'),
    ('Можно ли использовать лямбда с исключениями?', 2, 'MULTIPLE_CHOICE'),
    ('Как передать лямбду в метод?', 2, 'MULTIPLE_CHOICE'),
    ('Как лямбда выражение влияет на читаемость кода?', 2, 'MULTIPLE_CHOICE'),
    ('Что такое default-метод в интерфейсе?', 2, 'MULTIPLE_CHOICE'),
    ('Какие ограничения есть у лямбд?', 2, 'MULTIPLE_CHOICE'),
    ('Как использовать Consumer и Supplier?', 2, 'MULTIPLE_CHOICE'),
    ('Можно ли использовать лямбды в Android?', 2, 'MULTIPLE_CHOICE'),
    ('Как использовать функции в качестве параметров?', 2, 'MULTIPLE_CHOICE');
-- Привязка вопросов к новым тестам
INSERT INTO answer (question_id, text, is_correct) VALUES
    (29, 'Это средство для чтения/записи данных', TRUE),
    (29, 'Это инструмент для обработки исключений', FALSE),
    (30, 'Использовать FileReader', TRUE),
    (30, 'Использовать Scanner напрямую', FALSE),
    (31, 'Буферизация данных для увеличения производительности', TRUE),
    (31, 'Сжатие данных', FALSE),
    (32, 'Использовать PrintWriter', TRUE),
    (32, 'Использовать System.out', FALSE),
    (33, 'Reader работает с символами, InputStream с байтами', TRUE),
    (33, 'Они полностью идентичны', FALSE),
    (34, 'Метод close()', TRUE),
    (34, 'Метод stop()', FALSE),
    (35, 'java.nio', TRUE),
    (35, 'java.util.stream', FALSE),
    (36, 'Для записи байтов в файл', TRUE),
    (36, 'Для чтения байтов из файла', FALSE),
    (37, 'С помощью BufferedReader.readLine()', TRUE),
    (37, 'С помощью Scanner.read()', FALSE),
    (38, 'Использовать try-catch', TRUE),
    (38, 'Игнорировать ошибку', FALSE),
    (39, 'Метод очищает буфер', TRUE),
    (39, 'Метод завершает программу', FALSE),
    (40, 'С помощью BufferedReader.readLine()', TRUE),
    (40, 'С помощью System.in', FALSE),
    (41, 'Использовать Files.size()', TRUE),
    (41, 'Использовать System.out.println()', FALSE),
    (42, 'Files.copy()', TRUE),
    (42, 'BufferedReader.copy()', FALSE);

INSERT INTO answer (question_id, text, is_correct) VALUES
    (43, 'Ошибка, возникающая во время выполнения программы', TRUE),
    (43, 'Ошибка компиляции', FALSE),
    (44, 'try { ... } catch (Exception e) { ... }', TRUE),
    (44, 'try { ... } catch () { ... }', FALSE),
    (45, 'Исключения, которые нужно обрабатывать', TRUE),
    (45, 'Исключения, которые игнорируются', FALSE),
    (46, 'throw', TRUE),
    (46, 'throws', FALSE),
    (47, 'Throwable', TRUE),
    (47, 'Exception', FALSE),
    (48, 'Гарантированное выполнение кода', TRUE),
    (48, 'Завершение программы', FALSE),
    (49, 'Создать класс, наследующий Exception', TRUE),
    (49, 'Использовать метод System.exit()', FALSE),
    (50, 'Использовать Optional', TRUE),
    (50, 'Игнорировать значения null', FALSE),
    (51, 'Перечислить через "|"', TRUE),
    (51, 'Использовать несколько блоков catch', FALSE),
    (52, 'Программа завершится с ошибкой', TRUE),
    (52, 'Программа продолжит выполнение', FALSE),
    (53, 'Checked и unchecked', TRUE),
    (53, 'Runtime и compile-time', FALSE),
    (54, 'Исключение неверного аргумента', TRUE),
    (54, 'Исключение деления на ноль', FALSE),
    (55, 'Использовать Thread.UncaughtExceptionHandler', TRUE),
    (55, 'Игнорировать исключения', FALSE),
    (56, 'Использовать throw new RuntimeException()', TRUE),
    (56, 'Использовать return;', FALSE);

    INSERT INTO answer (question_id, text, is_correct) VALUES
    (57, 'Выполнение нескольких потоков одновременно', TRUE),
    (57, 'Обработка исключений', FALSE),
    (58, 'Создать класс, реализующий Runnable', TRUE),
    (58, 'Использовать метод main()', FALSE),
    (59, 'Thread — класс, Runnable — интерфейс', TRUE),
    (59, 'Thread — интерфейс, Runnable — класс', FALSE),
    (60, 'Ожидает завершения потока', TRUE),
    (60, 'Останавливает поток', FALSE),
    (61, 'Запускает поток', TRUE),
    (61, 'Создает поток', FALSE),
    (62, 'synchronized синхронизирует блок кода, volatile — переменную', TRUE),
    (62, 'synchronized работает только с методами', FALSE),
    (63, 'Состояние взаимной блокировки потоков', TRUE),
    (63, 'Состояние завершения программы', FALSE),
    (64, 'Использовать синхронизацию', TRUE),
    (64, 'Игнорировать конфликты', FALSE),
    (65, 'Использовать interrupt()', TRUE),
    (65, 'Использовать System.exit()', FALSE),
    (66, 'Пул потоков для управления многозадачностью', TRUE),
    (66, 'Класс для создания потоков', FALSE),
    (67, 'Callable возвращает результат, Runnable — нет', TRUE),
    (67, 'Callable и Runnable идентичны', FALSE),
    (68, 'Использовать ReentrantLock', TRUE),
    (68, 'Использовать synchronized', FALSE),
    (69, 'Переменная, уникальная для потока', TRUE),
    (69, 'Глобальная переменная', FALSE),
    (70, 'Использовать System.nanoTime()', TRUE),
    (70, 'Использовать System.exit()', FALSE);

    INSERT INTO answer (question_id, text, is_correct) VALUES
    (71, 'Упрощение кода для анонимных классов', TRUE),
    (71, 'Тип данных', FALSE),
    (72, 'Использовать оператор "->"', TRUE),
    (72, 'Использовать оператор "::"', FALSE),
    (73, 'Лямбды реализуют функциональные интерфейсы', TRUE),
    (73, 'Лямбды заменяют классы', FALSE),
    (74, 'Ссылка на метод', TRUE),
    (74, 'Ссылка на объект', FALSE),
    (75, 'Function, Consumer, Supplier', TRUE),
    (75, 'Thread, Runnable, Callable', FALSE),
    (76, 'Упрощение обработки данных', TRUE),
    (76, 'Создание потоков', FALSE),
    (77, 'Да, через лямбды можно обрабатывать исключения', TRUE),
    (77, 'Нет, исключения не поддерживаются', FALSE),
    (78, 'Передать в метод как аргумент', TRUE),
    (78, 'Лямбды нельзя передавать в методы', FALSE),
    (79, 'Уменьшение объема кода', TRUE),
    (79, 'Увеличение объема кода', FALSE),
    (80, 'Метод с реализацией по умолчанию в интерфейсе', TRUE),
    (80, 'Метод без реализации', FALSE),
    (81, 'Лямбды не могут использовать непоточные переменные', TRUE),
    (81, 'Лямбды не могут быть внутри методов', FALSE),
    (82, 'Consumer принимает значение, Supplier возвращает', TRUE),
    (82, 'Consumer возвращает значение, Supplier принимает', FALSE),
    (83, 'Да, через библиотеки Java 8+', TRUE),
    (83, 'Нет, в Android лямбды не поддерживаются', FALSE),
    (84, 'Использовать функциональный интерфейс', TRUE),
    (84, 'Использовать Reflection API', FALSE);



